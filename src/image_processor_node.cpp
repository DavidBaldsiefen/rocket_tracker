#include <cuda_runtime.h>
#include <cv_bridge/cv_bridge.h>
#include <fstream>
#include <image_transport/image_transport.h>
#include <opencv4/opencv2/opencv.hpp>
#include <rocket_tracker/detectionMSG.h> // Autogenerated by ROS
#include <rocket_tracker/image.h>
#include <ros/package.h>
#include <ros/ros.h>

#include "NvInfer.h"

static ros::Publisher detectionPublisher;
static cv::VideoCapture capture;

static void **buffers;
nvinfer1::IExecutionContext *context;
static int32_t inputIndex = 0;
static int32_t outputIndex = 4;
static int32_t numBindings = 5;
static int64_t output_size = 1 * 25200 * 85; // default output size for YOLOv5

static int num_classes = 80; // COCO class count
static int model_width = 640;
static int model_height = 640;

static std::string time_logging_string = "";
static bool TIME_LOGGING = false;
static bool TRACE_LOGGING = false;
static bool PERF_TEST = false;

template <typename... Args> std::string string_format(const std::string &format, Args... args) {
    // from https://stackoverflow.com/a/26221725
    int size_s = std::snprintf(nullptr, 0, format.c_str(), args...) + 1; // Extra space for '\0'
    if (size_s <= 0) {
        throw std::runtime_error("Error during formatting.");
    }
    auto size = static_cast<size_t>(size_s);
    auto buf = std::make_unique<char[]>(size);
    std::snprintf(buf.get(), size, format.c_str(), args...);
    return std::string(buf.get(), buf.get() + size - 1); // We don't want the '\0' inside
}

void preprocessImgTRT(cv::Mat *img, void *inputBuffer) {
    // perform preprocessing
    // only resize down
    if (img->rows > model_height || img->cols > model_width) {
        cv::resize(*img, *img, cv::Size(model_width, model_height));
    }

    static int model_size = model_width * model_height;
    float *inputArray = new float[1 * 3 * model_size];

    // for each is significantly faster than all other methods to traverse over the cv::Mat
    // (read online and confirmed myself)
    img->forEach<cv::Vec3b>([&](cv::Vec3b &p, const int *position) -> void {
        // p[0-2] contains bgr data, position[0-1] the row-column location
        // Incoming data is BGR, so convert to RGB in the process
        int index = model_height * position[0] + position[1];
        inputArray[index] = p[2] / 255.0f;
        inputArray[model_size + index] = p[1] / 255.0f;
        inputArray[2 * model_size + index] = p[0] / 255.0f;
    });

    static size_t input_size = 1 * 3 * model_width * model_height * sizeof(float);
    cudaMemcpy(inputBuffer, inputArray, input_size, cudaMemcpyHostToDevice);
}

void postprocessTRTdetections(void *outputBuffer, rocket_tracker::detectionMSG *detection) {

    // inspired by https://github.com/ultralytics/yolov5/issues/708#issuecomment-674422178

    uint64_t time = ros::Time::now().toNSec();

    static size_t output_buffer_size = output_size * sizeof(float);
    std::vector<float> cpu_output(output_size);

    cudaMemcpy(cpu_output.data(), outputBuffer, output_buffer_size, cudaMemcpyDeviceToHost);

    uint64_t time2 = ros::Time::now().toNSec();

    unsigned long dimensions =
        5 + num_classes; // 0,1,2,3 ->box,4->confidenceï¼Œ5-85 -> coco classes confidence
    unsigned long numPredictions = cpu_output.size() / dimensions; // 25.200
    unsigned long confidenceIndex = 4;
    unsigned long labelStartIndex = 5;

    if (TRACE_LOGGING) {
        std::string outputstring = "";
        for (int i = 0; i < 6; i++) {
            outputstring += std::to_string(cpu_output[i]) + " ";
            if (i == 3 || i == 4) {
                outputstring += "| ";
            }
        }
        ROS_INFO("%s", outputstring.c_str());
    }

    int highest_conf_index = 0;
    int highest_conf_label = 0;
    float highest_conf = 0.4f;
    for (int index = 0; index < output_size; index += dimensions) {
        float confidence = cpu_output[index + confidenceIndex];

        // for multiple classes, combine the confidence with class confidences
        // for single class models, this step can be skipped
        if (num_classes > 1) {
            if (confidence <= highest_conf) {
                continue;
            }
            for (unsigned long j = labelStartIndex; j < dimensions; ++j) {
                float combined_conf = cpu_output[index + j] * confidence;
                if (combined_conf > highest_conf) {
                    highest_conf = combined_conf;
                    highest_conf_index = index;
                    highest_conf_label = j - 5;
                }
            }
        } else {
            if (confidence > highest_conf) {
                highest_conf = confidence;
                highest_conf_index = index;
                highest_conf_label = 1;
            }
        }
    }

    // Evaluate results
    if (highest_conf > 0.4f) {
        if (TRACE_LOGGING)
            ROS_INFO("Detected class %d with confidence %lf", highest_conf_label, highest_conf);
        detection->propability = highest_conf;
        detection->classID = highest_conf_label;
        detection->centerX = cpu_output[highest_conf_index];
        detection->centerY = cpu_output[highest_conf_index + 1];
        detection->width = cpu_output[highest_conf_index + 2];
        detection->height = cpu_output[highest_conf_index + 3];
    }

    uint64_t time3 = ros::Time::now().toNSec();

    if (TIME_LOGGING)
        time_logging_string +=
            string_format("[%.2lf %.2lf]", (time2 - time) / 1000000.0, (time3 - time2) / 1000000.0);
}

void processImage(cv::Mat *frame, uint frameID, ros::Time frameStamp) {

    rocket_tracker::detectionMSG result;
    result.centerX = 0.0;
    result.centerY = 0.0;
    result.width = 0.0;
    result.height = 0.0;
    result.classID = 0;
    result.propability = 0.0;
    result.frameID = frameID;

    uint64_t time1 = ros::Time::now().toNSec();
    preprocessImgTRT(frame, buffers[inputIndex]);
    uint64_t time2 = ros::Time::now().toNSec();
    context->executeV2(buffers); // Invoke synchronous inference
    uint64_t time3 = ros::Time::now().toNSec();
    postprocessTRTdetections(buffers[outputIndex], &result);
    uint64_t time4 = ros::Time::now().toNSec();

    result.timestamp = ros::Time::now();
    result.processingTime = (result.timestamp.toNSec() - frameStamp.toNSec()) / 1000000.0;

    detectionPublisher.publish(result);

    double preTime = (time2 - time1) / 1000000.0;
    double fwdTime = (time3 - time2) / 1000000.0;
    double pstTime = (time4 - time3) / 1000000.0;

    // FPS avg calculation
    if (PERF_TEST) {
        static int iterationcounter = 0;
        static double totalTime = 0, avg_fps = 0, avg_pre = 0, avg_fwd = 0, avg_pst = 0;
        totalTime += result.processingTime;
        avg_pre += preTime;
        avg_fwd += fwdTime;
        avg_pst += pstTime;
        iterationcounter++;
        if (iterationcounter >= 1000) {
            avg_fps = 1000 / (totalTime / 1000.0);
            avg_pre /= 1000.0;
            avg_fwd /= 1000.0;
            avg_pst /= 1000.0;
            totalTime = 0;
            iterationcounter = 0;

            ROS_INFO("Results of performance measurement after 1000 frames:\nAVG FPS: %.1f AVG "
                     "PRE: %.2f AVG FWD: "
                     "%.2f AVG PST: %.2f",
                     avg_fps, avg_pre, avg_fwd, avg_pst);

            avg_pre = 0.0;
            avg_fwd = 0.0;
            avg_pst = 0.0;
        }
    }

    if (TIME_LOGGING)
        ROS_INFO("Total detection time: %.2lf [PRE: %.2lf FWD: %.2f PST: %.2f]",
                 result.processingTime, preTime, fwdTime, pstTime);
}

bool initCapture(std::string videopath) {

    // Open video file
    ROS_INFO("Loading video from %s", videopath.c_str());
    capture = cv::VideoCapture(videopath);
    if (!capture.isOpened()) {
        capture.release();
        ROS_ERROR("Failed to open video capture! Provided path: %s", videopath.c_str());
        return false;
    }
    // "publish" the video specs
    ros::param::set("/rocket_tracker/input_fps", capture.get(cv::CAP_PROP_FPS));
    ros::param::set("/rocket_tracker/input_width", capture.get(cv::CAP_PROP_FRAME_WIDTH));
    ros::param::set("/rocket_tracker/input_height", capture.get(cv::CAP_PROP_FRAME_HEIGHT));
    return true;
}

class Logger : public nvinfer1::ILogger {
    void log(Severity severity, const char *msg) noexcept override {

        if (severity == Severity::kINFO) {
            ROS_INFO("[TensorRT] %s", msg);
        } else if (severity == Severity::kWARNING) {
            ROS_WARN("[TensorRT] %s", msg);
        } else if (severity == Severity::kERROR || severity == Severity::kINTERNAL_ERROR) {
            ROS_ERROR("[TensorRT] %s", msg);
        }
    }
} logger;

bool initTensorRT(std::string enginePath) {
    ROS_INFO("Initializing TRT");
    long size;
    char *trtModelStream;
    std::ifstream file(enginePath, std::ios::binary);
    ROS_INFO("Loading engine from %s", enginePath.c_str());
    if (file.good()) {
        file.seekg(0, file.end);
        size = file.tellg();
        file.seekg(0, file.beg);
        trtModelStream = new char[size];
        assert(trtModelStream);
        file.read(trtModelStream, size);
        file.close();
    }

    // Create runtime, deserialize engine and create execution context
    nvinfer1::IRuntime *runtime = nvinfer1::createInferRuntime(logger);
    assert(runtime != nullptr);
    nvinfer1::ICudaEngine *engine = runtime->deserializeCudaEngine(trtModelStream, size);
    assert(engine != nullptr);
    context = engine->createExecutionContext();
    assert(context != nullptr);
    delete[] trtModelStream;

    // Allocate memory for every engine binding, and gather input & output information
    inputIndex = engine->getBindingIndex("images");
    outputIndex = engine->getBindingIndex("output");
    ROS_INFO("Reading engine bindings:");
    numBindings = engine->getNbBindings();
    buffers = new void *[numBindings];
    for (int i = 0; i < numBindings; i++) {

        std::string dimension_desc = " [";
        size_t size = 1;

        // Multiply every dimension of each binding to get its total size
        nvinfer1::Dims dims = engine->getBindingDimensions(i);
        for (size_t j = 0; j < dims.nbDims; ++j) {
            size *= dims.d[j];
            dimension_desc += std::to_string(dims.d[j]) + " ";
        }

        auto binding_size = size * 1 * sizeof(float);
        if (cudaMallocHost(&buffers[i], binding_size) != cudaSuccess) {
            ROS_WARN("Failed to allocate pinned memory! Switching to pageable memory instead.");
            if (cudaMalloc(&buffers[i], binding_size) != cudaSuccess) {
                ROS_ERROR("Could not allocate cuda memory.");
                return 0;
            }
        }

        dimension_desc.pop_back();
        dimension_desc += "] (\"" + std::string(engine->getBindingName(i)) + "\")";
        dimension_desc += " Datatype: " + std::to_string((int32_t)engine->getBindingDataType(i));

        if (i == outputIndex) {
            num_classes = dims.d[dims.nbDims - 1] - 5;
            output_size = size;
        } else if (i == inputIndex) {
            model_width = dims.d[dims.nbDims - 2];
            model_height = dims.d[dims.nbDims - 1];
        }

        ROS_INFO("%s", dimension_desc.c_str());
    }

    if (engine->getBindingDataType(inputIndex) != nvinfer1::DataType::kFLOAT ||
        engine->getBindingDataType(outputIndex) != nvinfer1::DataType::kFLOAT) {
        ROS_WARN("Engine input and/or output datatype is not float. Please change to a different "
                 "engine");
    }

    ROS_INFO("Model with %d classes and input size %dx%d loaded", num_classes, model_width,
             model_height);
    ros::param::set("/rocket_tracker/model_width", model_width);
    ros::param::set("/rocket_tracker/model_height", model_height);
    ros::param::set("/rocket_tracker/trt_ready", true);

    ROS_INFO("TRT initialized");
}

int main(int argc, char **argv) {

    ros::init(argc, argv, "IMAGEPROCESSOR");
    ros::NodeHandle nh("~");

    // Get weightfile path from arguments
    std::string enginePath;
    if (argc == 2) {
        enginePath = argv[1];
    } else {
        ROS_ERROR("Invalid number of argument passed to image processor.");
        ros::shutdown();
        return 0;
    }

    ros::param::get("/rocket_tracker/time_logging", TIME_LOGGING);
    ros::param::get("/rocket_tracker/trace_logging", TRACE_LOGGING);
    ros::param::get("/rocket_tracker/performance_test", PERF_TEST);

    // TensorRT
    initTensorRT(enginePath);

    // Create ros publisher
    detectionPublisher = nh.advertise<rocket_tracker::detectionMSG>("/detection", 1);

    // Creating image-transport publisher for GUI
    image_transport::ImageTransport it(nh);
    // queuesize = fps * 2, so there is a 2 seconds buffer to publish
    image_transport::Publisher pubimg =
        it.advertise("/image_topic", (uint32_t)capture.get(cv::CAP_PROP_FPS) * 2);

    // Prepare video
    std::string videopath = "";
    ros::param::param<std::string>("/rocket_tracker/videopath", videopath,
                                   "/home/david/Downloads/silent_launches.mp4");
    initCapture(videopath);

    // Main loop
    int target_fps;
    ros::param::param<int>("/rocket_tracker/fg_fps_target", target_fps, cv::CAP_PROP_FPS);
    if (PERF_TEST) {
        target_fps = 50;
    }
    ros::Rate r(target_fps); // Set loop rate for framegrabber

    sensor_msgs::ImagePtr msg;
    cv::Mat videoFrame;
    uint frame_id = 0;

    while (ros::ok) {

        if (!capture.read(videoFrame)) {
            ROS_INFO("End of video reached - resetting to first frame.");
            capture.set(cv::CAP_PROP_POS_FRAMES, 0);
            frame_id = 0;
            continue;
        }
        ros::Time timestamp = ros::Time::now();

        processImage(&videoFrame, frame_id, timestamp);

        // publish videoframe
        msg = cv_bridge::CvImage(std_msgs::Header(), "bgr8", videoFrame).toImageMsg();
        msg->header.stamp = timestamp;
        msg->header.seq = frame_id;
        pubimg.publish(msg);
        frame_id++;

        // check for parameter updates
        static int new_target_fps = target_fps;
        if (ros::param::getCached("rocket_tracker/fg_fps_target", new_target_fps) &&
            (new_target_fps != target_fps)) {
            target_fps = new_target_fps;
            r = ros::Rate(target_fps);
        }
        static std::string new_videopath = videopath;
        if (ros::param::getCached("rocket_tracker/videopath", new_videopath) &&
            (new_videopath != videopath)) {
            capture.release();
            if (initCapture(new_videopath)) {
                videopath = new_videopath;
            } else {
                initCapture(videopath);
                ROS_WARN("Loading video from %s failed. Reverting to old path %s",
                         new_videopath.c_str(), videopath.c_str());
                new_videopath = videopath;
                ros::param::set("/rocket_tracker/videopath", videopath);
            }
        }

        ros::spinOnce();
        r.sleep();
    }

    // Shut everything down cleanly
    for (int i = 0; i < numBindings; i++) {
        cudaFreeHost(buffers[i]);
    }
    ros::shutdown();
    pubimg.shutdown();
    detectionPublisher.shutdown();
    nh.shutdown();
    return 0;
}
